cmake_minimum_required(VERSION 3.0)
project(crtb_net_examples)

if(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    set(CMAKE_CXX_FLAGS "/std:c++17 /EHsc")
else()
    set(CMAKE_CXX_FLAGS -std=c++17)
endif()

option(RTB_ENABLE_SSL "Finds and links OpenSSL" ON)
option(RTB_BUILD_EXAMPLES "Builds examples" ON)

find_package(Threads REQUIRED)

if(RTB_ENABLE_SSL)
    find_package(OpenSSL REQUIRED)
endif()

include_directories(include .ext/rtb/include)

add_library(crtb_net STATIC src/crtb_net.cpp)

if(RTB_ENABLE_SSL)
    target_compile_definitions(crtb_net PUBLIC rtb_ENABLE_SSL)
    target_link_libraries(crtb_net PUBLIC Threads::Threads OpenSSL::Crypto OpenSSL::SSL)
else()
    target_link_libraries(crtb_net PUBLIC Threads::Threads)
endif()

if(WIN32)
    target_compile_definitions(crtb_net PUBLIC WIN32_LEAN_AND_MEAN)
    target_link_libraries(crtb_net PUBLIC wsock32 ws2_32)
endif()

if(RTB_BUILD_EXAMPLES)
    add_executable(server examples/server.c)
    add_executable(client examples/client.c)
    add_executable(downloader examples/downloader.c)
    add_executable(async_client examples/async_client.c)
    add_executable(dir_lister examples/dir_lister.c)
    target_link_libraries(server PRIVATE crtb_net)
    target_link_libraries(client PRIVATE crtb_net)
    target_link_libraries(downloader PRIVATE crtb_net)
    target_link_libraries(async_client PRIVATE crtb_net)
    target_link_libraries(dir_lister PRIVATE crtb_net)
    if(RTB_ENABLE_SSL)
        add_executable(ssl_client examples/ssl_client.c)
        add_executable(ssl_server examples/ssl_server.c)
        target_link_libraries(ssl_client PRIVATE crtb_net)
        target_link_libraries(ssl_server PRIVATE crtb_net)
    endif()
endif()
